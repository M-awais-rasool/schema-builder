version: '3.8'

services:
  # MongoDB database
  mongodb:
    image: mongo:7.0
    container_name: schema-builder-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: schema_builder
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./deployments/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - schema-builder-network

  # Redis for caching (optional)
  redis:
    image: redis:7.2-alpine
    container_name: schema-builder-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - schema-builder-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: schema-builder-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - ENV=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/schema_builder?authSource=admin
      - MONGODB_DATABASE=schema_builder
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,https://your-frontend-domain.com
    depends_on:
      - mongodb
      - redis
    networks:
      - schema-builder-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: schema-builder-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - schema-builder-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  schema-builder-network:
    driver: bridge